{"version":3,"sources":["DirectoryEntry.js","DirectoryForm.js","App.js","serviceWorker.js","index.js"],"names":["DirectoryEntry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","person","_this$props","onHandleDelete","react_default","a","createElement","map","p","key","id","name","number","onClick","Component","DirectoryForm","newName","newPhone","onChangeName","onHandleSubmit","onChangePhone","onSubmit","value","onChange","type","baseUrl","App","handleNameChange","e","setState","target","handlePhoneChange","handleDelete","window","confirm","axios","delete","then","res","console","log","data","persons","state","filter","handleSubmit","preventDefault","some","alert","personObject","post","concat","_this2","get","_this$state","className","src_DirectoryForm","src_DirectoryEntry","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.526f9e91.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\n\nclass DirectoryEntry extends Component {\n    constructor(props){\n        super(props);\n        this.person = this.props;\n    }\n    render() {\n        const {person, onHandleDelete} = this.props;\n        return (\n          <div>\n              <h2>Numerot</h2>\n            {person.map(p => \n            <p key={p.id}>{ p.name } {p.number} <button onClick={onHandleDelete(p.id, p.name)}>Delete</button></p> \n            )}\n          </div>  \n        );\n    }         \n    \n}\n\nexport default DirectoryEntry;\n\n\n","\nimport React, { Component } from 'react';\n\nclass DirectoryForm extends Component {\n    constructor(props){\n        super(props);\n        this.person = this.props;\n    }\n    render() {\n        const {newName, newPhone, onChangeName, onHandleSubmit, onChangePhone} = this.props;\n        return (\n            <form onSubmit = {onHandleSubmit}>\n            <div>\n              nimi: <input value={newName} onChange={onChangeName}/>\n            </div>\n            <div>\n              numero: <input value={newPhone} onChange={onChangePhone}/>\n              </div>\n            <div>\n              <button type=\"submit\" >lisää</button>\n            </div>\n          </form>\n        );\n    }         \n    \n}\n\nexport default DirectoryForm;\n\n\n","import React, { Component } from 'react';\nimport DirectoryEntry from './DirectoryEntry';\nimport DirectoryForm from './DirectoryForm';\n\nimport axios from 'axios';\n\nconst baseUrl = '/api/persons'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      person: [],\n      newName: \"\",\n      newPhone: \"\"\n    }\n  }\n\ncomponentDidMount(){\n  axios.get(baseUrl)\n        .then(res => {\n          this.setState({person: res.data});\n        })\n}\n\n  //handle name change\nhandleNameChange = (e) => {\n  //console.log(e.target.value);\n  this.setState({\n    newName : e.target.value\n  })\n}\n\n//handle phone change\nhandlePhoneChange = (e) => {\n  this.setState({newPhone : e.target.value})\n}\n\n//handle delete\nhandleDelete = (id, name)  => {\n  return () => {\n    window.confirm(\"Delete \"+ name +\"?\");\n    axios.delete(baseUrl/{id})\n    .then(res=> {\n      console.log(res.data);  \n    });    \n    const persons = this.state.person.filter(p => p.id !==id);\n    this.setState({person : persons})\n  }\n}\n\n\n  //handle submit\nhandleSubmit = (e) => {\n  e.preventDefault();\n  //check if name is present, error message, else add the name\n  if(this.state.person.some(p=> p.name === this.state.newName)){\n    alert(\"Name already exists!\");\n  } else {\n\n  //new person obj\n  const personObject = {\n    name: this.state.newName,\n    number : this.state.newPhone\n  }\n  \n  //POST data to json-server\n  axios.post(baseUrl, personObject)\n        .then(res=> {\n          this.setState({person: this.state.person.concat(res.data), \n            newName: '', \n            newPhone: ''});\n        })\n\n  }\n}\n\n\n\n  render() {\n    const { person, newName, newPhone } = this.state;\n    return (\n      <div className=\"App\">\n        <h2>Puhelinluettelo</h2>\n        \n        <DirectoryForm newName={newName} newPhone={newPhone} \n                        onChangeName={this.handleNameChange} \n                        onChangePhone={this.handlePhoneChange} \n                        onHandleSubmit= {this.handleSubmit} />\n        \n        <DirectoryEntry person={person} onHandleDelete={this.handleDelete}/>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}